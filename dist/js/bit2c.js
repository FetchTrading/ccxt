"use strict";const e=require("./base/Exchange"),{ExchangeError:t}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"bit2c",name:"Bit2C",countries:"IL",rateLimit:3e3,has:{CORS:!1,fetchOpenOrders:!0,fetchMyTrades:!0},urls:{logo:"https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg",api:"https://bit2c.co.il",www:"https://www.bit2c.co.il",doc:["https://www.bit2c.co.il/home/api","https://github.com/OferE/bit2c"]},api:{public:{get:["Exchanges/{pair}/Ticker","Exchanges/{pair}/orderbook","Exchanges/{pair}/trades","Exchanges/{pair}/lasttrades"]},private:{post:["Merchant/CreateCheckout","Order/AddCoinFundsRequest","Order/AddFund","Order/AddOrder","Order/AddOrderMarketPriceBuy","Order/AddOrderMarketPriceSell","Order/CancelOrder","Order/AddCoinFundsRequest","Order/AddStopOrder","Payment/GetMyId","Payment/Send","Payment/Pay"],get:["Account/Balance","Account/Balance/v2","Order/MyOrders","Order/GetById","Order/AccountHistory","Order/OrderHistory"]}},markets:{"BTC/NIS":{id:"BtcNis",symbol:"BTC/NIS",base:"BTC",quote:"NIS"},"BCH/NIS":{id:"BchNis",symbol:"BCH/NIS",base:"BCH",quote:"NIS"},"LTC/NIS":{id:"LtcNis",symbol:"LTC/NIS",base:"LTC",quote:"NIS"},"BTG/NIS":{id:"BtgNis",symbol:"BTG/NIS",base:"BTG",quote:"NIS"}},fees:{trading:{maker:.005,taker:.005}}})}async fetchBalance(e={}){let t=await this.privateGetAccountBalanceV2(),i={info:t},s=Object.keys(this.currencies);for(let e=0;e<s.length;e++){let r=s[e],a=this.account();if(r in t){let e="AVAILABLE_"+r;a.free=t[e],a.total=t[r],a.used=a.total-a.free}i[r]=a}return this.parseBalance(i)}async fetchOrderBook(e,t,i={}){let s=await this.publicGetExchangesPairOrderbook(this.extend({pair:this.marketId(e)},i));return this.parseOrderBook(s)}async fetchTicker(e,t={}){let i=await this.publicGetExchangesPairTicker(this.extend({pair:this.marketId(e)},t)),s=this.milliseconds(),r=this.safeFloat(i,"av"),a=this.safeFloat(i,"a"),d=a*r,o=this.safeFloat(i,"ll");return{symbol:e,timestamp:s,datetime:this.iso8601(s),high:void 0,low:void 0,bid:this.safeFloat(i,"h"),bidVolume:void 0,ask:this.safeFloat(i,"l"),askVolume:void 0,vwap:void 0,open:void 0,close:o,last:o,previousClose:void 0,change:void 0,percentage:void 0,average:r,baseVolume:a,quoteVolume:d,info:i}}async fetchTrades(e,t,i,s={}){let r=this.market(e),a=await this.publicGetExchangesPairTrades(this.extend({pair:r.id},s));return this.parseTrades(a,r,t,i)}async createOrder(e,t,i,s,r,a={}){let d="privatePostOrderAddOrder",o={Amount:s,Pair:this.marketId(e)};"market"===t?d+="MarketPrice"+this.capitalize(i):(o.Price=r,o.Total=s*r,o.IsBid="buy"===i);let n=await this[d](this.extend(o,a));return{info:n,id:n.NewOrder.id}}async cancelOrder(e,t,i={}){return await this.privatePostOrderCancelOrder({id:e})}sign(e,t="public",i="GET",s={},r,a){let d=this.urls.api+"/"+this.implodeParams(e,s);if("public"===t)d+=".json";else{this.checkRequiredCredentials();let e=this.nonce(),t=this.extend({nonce:e},s);a=this.urlencode(t);let i=this.hmac(this.encode(a),this.encode(this.secret),"sha512","base64");r={"Content-Type":"application/x-www-form-urlencoded",key:this.apiKey,sign:this.decode(i)}}return{url:d,method:i,body:a,headers:r}}async fetchOpenOrders(e,i,s,r={}){if(await this.loadMarkets(),void 0===e)throw new t(this.id+" fetchOpenOrders() requires a symbol argument");let a=this.market(e),d=await this.privateGetOrderMyOrders(this.extend({pair:a.id},r)),o=this.safeValue(d,a.id,{}),n=this.safeValue(o,"ask"),c=this.safeValue(o,"bid");return this.parseOrders(this.arrayConcat(n,c),a,i,s)}parseOrder(e,t){let i=e.created,s=e.price,r=e.amount,a=s*r,d=void 0;void 0!==t&&(d=t.symbol);let o=this.safeValue(e,"type");return 0===o?o="buy":1===o&&(o="sell"),{id:this.safeString(e,"id"),timestamp:i,datetime:this.iso8601(i),lastTradeTimestamp:void 0,status:this.safeString(e,"status"),symbol:d,type:void 0,side:o,price:s,amount:r,filled:void 0,remaining:void 0,cost:a,trades:void 0,fee:void 0,info:e}}async fetchMyTrades(e,t,i,s={}){await this.loadMarkets();let r=void 0,a={};void 0!==i&&(a.take=i),a.take=i,void 0!==t&&(a.toTime=this.ymd(this.milliseconds(),"."),a.fromTime=this.ymd(t,".")),void 0!==e&&(r=this.market(e),a.pair=r.id);let d=await this.privateGetOrderOrderhistory(this.extend(a,s));return this.parseTrades(d,r,t,i)}parseTrade(e,t){let i=void 0,s=void 0,r=void 0,a=void 0,d=void 0,o=void 0,n=void 0,c=this.safeString(e,"reference");if(void 0!==c){i=1e3*this.safeInteger(e,"ticks"),r=this.safeFloat(e,"price"),a=this.safeFloat(e,"firstAmount");let h=c.split("|");if(void 0===t){let i=this.safeString(e,"pair");i in this.markets_by_id[i]?t=this.markets_by_id[i]:h[0]in this.markets_by_id&&(t=this.markets_by_id[h[0]])}d=h[1],s=h[2],0===(n=this.safeInteger(e,"action"))?n="buy":1===n&&(n="sell"),o=this.safeFloat(e,"feeAmount")}else i=1e3*this.safeInteger(e,"date"),s=this.safeInteger(e,"tid"),r=this.safeFloat(e,"price"),a=this.safeFloat(e,"amount");let h=void 0;return void 0!==t&&(h=t.symbol),{info:e,id:s,timestamp:i,datetime:this.iso8601(i),symbol:h,order:d,type:void 0,side:n,takerOrMaker:void 0,price:r,amount:a,cost:r*a,fee:{cost:o,currency:"NIS",rate:void 0}}}};
//# sourceMappingURL=bit2c.js.map