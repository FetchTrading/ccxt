"use strict";const e=require("./acx.js"),{ExchangeError:t}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"kuna",name:"Kuna",countries:"UA",rateLimit:1e3,version:"v2",has:{CORS:!1,fetchTickers:!0,fetchOpenOrders:!0,fetchMyTrades:!0,withdraw:!1},urls:{logo:"https://user-images.githubusercontent.com/1294454/31697638-912824fa-b3c1-11e7-8c36-cf9606eb94ac.jpg",api:"https://kuna.io",www:"https://kuna.io",doc:"https://kuna.io/documents/api",fees:"https://kuna.io/documents/api"},fees:{trading:{taker:.0025,maker:.0025},funding:{withdraw:{UAH:"1%",BTC:.001,BCH:.001,ETH:.01,WAVES:.01,GOL:0,GBG:0},deposit:{}}}})}async fetchMarkets(){let e=[{id:"btcuah",symbol:"BTC/UAH",base:"BTC",quote:"UAH",baseId:"btc",quoteId:"uah",precision:{amount:6,price:0},lot:1e-6,limits:{amount:{min:1e-6,max:void 0},price:{min:1,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"ethuah",symbol:"ETH/UAH",base:"ETH",quote:"UAH",baseId:"eth",quoteId:"uah",precision:{amount:6,price:0},lot:1e-6,limits:{amount:{min:1e-6,max:void 0},price:{min:1,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"gbguah",symbol:"GBG/UAH",base:"GBG",quote:"UAH",baseId:"gbg",quoteId:"uah",precision:{amount:3,price:2},lot:.001,limits:{amount:{min:1e-6,max:void 0},price:{min:.01,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"kunbtc",symbol:"KUN/BTC",base:"KUN",quote:"BTC",baseId:"kun",quoteId:"btc",precision:{amount:6,price:6},lot:1e-6,limits:{amount:{min:1e-6,max:void 0},price:{min:1e-6,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"bchbtc",symbol:"BCH/BTC",base:"BCH",quote:"BTC",baseId:"bch",quoteId:"btc",precision:{amount:6,price:6},lot:1e-6,limits:{amount:{min:1e-6,max:void 0},price:{min:1e-6,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"bchuah",symbol:"BCH/UAH",base:"BCH",quote:"UAH",baseId:"bch",quoteId:"uah",precision:{amount:6,price:0},lot:1e-6,limits:{amount:{min:1e-6,max:void 0},price:{min:1,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"wavesuah",symbol:"WAVES/UAH",base:"WAVES",quote:"UAH",baseId:"waves",quoteId:"uah",precision:{amount:6,price:0},lot:1e-6,limits:{amount:{min:1e-6,max:void 0},price:{min:1,max:void 0},cost:{min:1e-6,max:void 0}}},{id:"arnbtc",symbol:"ARN/BTC",base:"ARN",quote:"BTC",baseId:"arn",quoteId:"btc"},{id:"b2bbtc",symbol:"B2B/BTC",base:"B2B",quote:"BTC",baseId:"b2b",quoteId:"btc"},{id:"evrbtc",symbol:"EVR/BTC",base:"EVR",quote:"BTC",baseId:"evr",quoteId:"btc"},{id:"golgbg",symbol:"GOL/GBG",base:"GOL",quote:"GBG",baseId:"gol",quoteId:"gbg"},{id:"rbtc",symbol:"R/BTC",base:"R",quote:"BTC",baseId:"r",quoteId:"btc"},{id:"rmcbtc",symbol:"RMC/BTC",base:"RMC",quote:"BTC",baseId:"rmc",quoteId:"btc"}],t=[],i=await this.publicGetTickers();for(let s=0;s<e.length;s++){let a=e[s];a.id in i&&t.push(a)}let s=this.indexBy(t,"id"),a=Object.keys(i);for(let e=0;e<a.length;e++){let i=a[e];if(!(i in s)){let e=i.replace("btc","");if((e=(e=e.replace("uah","")).replace("gbg","")).length>0){let s=e.length-0,a=i.slice(s),o=e.toUpperCase(),r=a.toUpperCase(),d=(o=this.commonCurrencyCode(o))+"/"+(r=this.commonCurrencyCode(r));t.push({id:i,symbol:d,base:o,quote:r,baseId:e,quoteId:a})}}}return t}async fetchOrderBook(e,t,i={}){await this.loadMarkets();let s=this.market(e),a=await this.publicGetOrderBook(this.extend({market:s.id},i));return this.parseOrderBook(a,void 0,"bids","asks","price","remaining_volume")}async fetchL3OrderBook(e,t,i={}){return this.fetchOrderBook(e,t,i)}async fetchOpenOrders(e,i,s,a={}){if(!e)throw new t(this.id+" fetchOpenOrders requires a symbol argument");await this.loadMarkets();let o=this.market(e),r=await this.privateGetOrders(this.extend({market:o.id},a));return this.parseOrders(r,o,i,s)}parseTrade(e,t){let i=this.parse8601(e.created_at),s=void 0;t&&(s=t.symbol);let a=this.safeString(e,"side");a={ask:"sell",bid:"buy"}[a];let o=this.safeFloat(e,"funds"),r=this.safeString(e,"order_id");return{id:e.id.toString(),timestamp:i,datetime:this.iso8601(i),symbol:s,type:void 0,side:a,price:this.safeFloat(e,"price"),amount:this.safeFloat(e,"volume"),cost:o,order:r,info:e}}async fetchTrades(e,t,i,s={}){await this.loadMarkets();let a=this.market(e),o=await this.publicGetTrades(this.extend({market:a.id},s));return this.parseTrades(o,a,t,i)}async fetchMyTrades(e,i,s,a={}){if(!e)throw new t(this.id+" fetchOpenOrders requires a symbol argument");await this.loadMarkets();let o=this.market(e),r=await this.privateGetTradesMy({market:o.id});return this.parseTrades(r,o,i,s)}};
//# sourceMappingURL=kuna.js.map