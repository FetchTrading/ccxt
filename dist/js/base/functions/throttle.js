"use strict";const{sleep:t,now:e}=require("./time");module.exports={throttle:function a(c){let i=e(),o=void 0!==c.numTokens?c.numTokens:c.capacity,n=!1;const r=[];return Object.assign(a=>{if(r.length>c.maxCapacity)throw new Error("Backlog is over max capacity of "+c.maxCapacity);return new Promise(async(s,l)=>{try{if(r.push({cost:a,resolve:s,reject:l}),!n){for(n=!0;r.length>0;){if((c.capacity?o>0:o>=0)&&r.length>0){let{cost:t,resolve:e,reject:a}=r[0];t=t||c.defaultCost,o>=Math.min(t,c.capacity)&&(o-=t,r.shift(),e())}const a=e(),n=a-i;i=a,o=Math.min(c.capacity,o+n*c.refillRate),await t(c.delay)}n=!1}}catch(t){l(t)}})},c,{configure:t=>a(Object.assign({},c,t))})}};
//# sourceMappingURL=throttle.js.map