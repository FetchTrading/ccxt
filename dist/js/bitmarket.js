"use strict";const e=require("./base/Exchange"),{ExchangeError:t}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"bitmarket",name:"BitMarket",countries:["PL","EU"],rateLimit:1500,has:{CORS:!1,fetchOHLCV:!0,withdraw:!0},timeframes:{"90m":"90m","6h":"6h","1d":"1d","1w":"7d","1M":"1m","3M":"3m","6M":"6m","1y":"1y"},urls:{logo:"https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg",api:{public:"https://www.bitmarket.net",private:"https://www.bitmarket.pl/api2/"},www:["https://www.bitmarket.pl","https://www.bitmarket.net"],doc:["https://www.bitmarket.net/docs.php?file=api_public.html","https://www.bitmarket.net/docs.php?file=api_private.html","https://github.com/bitmarket-net/api"]},api:{public:{get:["json/{market}/ticker","json/{market}/orderbook","json/{market}/trades","json/ctransfer","graphs/{market}/90m","graphs/{market}/6h","graphs/{market}/1d","graphs/{market}/7d","graphs/{market}/1m","graphs/{market}/3m","graphs/{market}/6m","graphs/{market}/1y"]},private:{post:["info","trade","cancel","orders","trades","history","withdrawals","tradingdesk","tradingdeskStatus","tradingdeskConfirm","cryptotradingdesk","cryptotradingdeskStatus","cryptotradingdeskConfirm","withdraw","withdrawFiat","withdrawPLNPP","withdrawFiatFast","deposit","transfer","transfers","marginList","marginOpen","marginClose","marginCancel","marginModify","marginBalanceAdd","marginBalanceRemove","swapList","swapOpen","swapClose"]}},markets:{"BCH/PLN":{id:"BCCPLN",symbol:"BCH/PLN",base:"BCH",quote:"PLN"},"BTG/PLN":{id:"BTGPLN",symbol:"BTG/PLN",base:"BTG",quote:"PLN"},"BTC/PLN":{id:"BTCPLN",symbol:"BTC/PLN",base:"BTC",quote:"PLN"},"BTC/EUR":{id:"BTCEUR",symbol:"BTC/EUR",base:"BTC",quote:"EUR"},"LTC/PLN":{id:"LTCPLN",symbol:"LTC/PLN",base:"LTC",quote:"PLN"},"LTC/BTC":{id:"LTCBTC",symbol:"LTC/BTC",base:"LTC",quote:"BTC"},"LiteMineX/BTC":{id:"LiteMineXBTC",symbol:"LiteMineX/BTC",base:"LiteMineX",quote:"BTC"}},fees:{trading:{tierBased:!0,percentage:!0,taker:.45/100,maker:.0015,tiers:{taker:[[0,.45/100],[99.99,.0044],[299.99,.0043],[499.99,.0042],[999.99,.41/100],[1999.99,.004],[2999.99,.39/100],[4999.99,.0038],[9999.99,.0037],[19999.99,.0036],[29999.99,.35/100],[49999.99,.34/100],[99999.99,.0033],[199999.99,.0032],[299999.99,.0031],[499999.99,0]],maker:[[0,.0015],[99.99,.14/100],[299.99,.0013],[499.99,.0012],[999.99,.0011],[1999.99,.001],[2999.99,.9/100],[4999.99,.008],[9999.99,.7/100],[19999.99,.006],[29999.99,.005],[49999.99,.004],[99999.99,.003],[199999.99,.002],[299999.99,.001],[499999.99,0]]}},funding:{tierBased:!1,percentage:!1,withdraw:{BTC:8e-4,LTC:.005,BCH:8e-4,BTG:8e-4,DOGE:1,EUR:2,PLN:2},deposit:{BTC:0,LTC:0,BCH:0,BTG:0,DOGE:25,EUR:2,PLN:0}}}})}async fetchBalance(e={}){await this.loadMarkets();let t=(await this.privatePostInfo()).data,a=t.balances,i={info:t},s=Object.keys(this.currencies);for(let e=0;e<s.length;e++){let t=s[e],r=this.account();t in a.available&&(r.free=a.available[t]),t in a.blocked&&(r.used=a.blocked[t]),r.total=this.sum(r.free,r.used),i[t]=r}return this.parseBalance(i)}async fetchOrderBook(e,t,a={}){let i=await this.publicGetJsonMarketOrderbook(this.extend({market:this.marketId(e)},a));return this.parseOrderBook(i)}async fetchTicker(e,t={}){let a=await this.publicGetJsonMarketTicker(this.extend({market:this.marketId(e)},t)),i=this.milliseconds(),s=this.safeFloat(a,"vwap"),r=this.safeFloat(a,"volume"),o=r*s,d=this.safeFloat(a,"last");return{symbol:e,timestamp:i,datetime:this.iso8601(i),high:this.safeFloat(a,"high"),low:this.safeFloat(a,"low"),bid:this.safeFloat(a,"bid"),bidVolume:void 0,ask:this.safeFloat(a,"ask"),askVolume:void 0,vwap:s,open:void 0,close:d,last:d,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:r,quoteVolume:o,info:a}}parseTrade(e,t){let a="bid"===e.type?"buy":"sell",i=1e3*e.date;return{id:e.tid.toString(),info:e,timestamp:i,datetime:this.iso8601(i),symbol:t.symbol,order:void 0,type:void 0,side:a,price:e.price,amount:e.amount}}async fetchTrades(e,t,a,i={}){let s=this.market(e),r=await this.publicGetJsonMarketTrades(this.extend({market:s.id},i));return this.parseTrades(r,s,t,a)}parseOHLCV(e,t,a="90m",i,s){return[1e3*e.time,parseFloat(e.open),parseFloat(e.high),parseFloat(e.low),parseFloat(e.close),parseFloat(e.vol)]}async fetchOHLCV(e,t="90m",a,i,s={}){await this.loadMarkets();let r="publicGetGraphsMarket"+this.timeframes[t],o=this.market(e),d=await this[r](this.extend({market:o.id},s));return this.parseOHLCVs(d,o,t,a,i)}async createOrder(e,t,a,i,s,r={}){let o=await this.privatePostTrade(this.extend({market:this.marketId(e),type:a,amount:i,rate:s},r)),d={info:o};return"id"in o.order&&(d.id=o.id),d}async cancelOrder(e,t,a={}){return await this.privatePostCancel({id:e})}isFiat(e){return"EUR"===e||"PLN"===e}async withdraw(e,a,i,s,r={}){this.checkAddress(i),await this.loadMarkets();let o=void 0,d={currency:e,quantity:a};if(this.isFiat(e)){if(o="privatePostWithdrawFiat",!("account"in r))throw new t(this.id+" requires account parameter to withdraw fiat currency");if(d.account=r.account,"account2"in r)d.account2=r.account2;else if("EUR"===e)throw new t(this.id+" requires account2 parameter to withdraw EUR");if("withdrawal_note"in r)d.withdrawal_note=r.withdrawal_note;else if("PLN"===e)throw new t(this.id+" requires withdrawal_note parameter to withdraw PLN")}else o="privatePostWithdraw",d.address=i;let n=await this[o](this.extend(d,r));return{info:n,id:n}}sign(e,t="public",a="GET",i={},s,r){let o=this.urls.api[t];if("public"===t)o+="/"+this.implodeParams(e+".json",i);else{this.checkRequiredCredentials();let t=this.nonce(),a=this.extend({tonce:t,method:e},i);r=this.urlencode(a),s={"API-Key":this.apiKey,"API-Hash":this.hmac(this.encode(r),this.encode(this.secret),"sha512")}}return{url:o,method:a,body:r,headers:s}}};
//# sourceMappingURL=bitmarket.js.map