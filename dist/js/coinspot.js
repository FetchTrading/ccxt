"use strict";const e=require("./base/Exchange"),{ExchangeError:t,AuthenticationError:s,NotSupported:i}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"coinspot",name:"CoinSpot",countries:"AU",rateLimit:1e3,has:{CORS:!1,createMarketOrder:!1},urls:{logo:"https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg",api:{public:"https://www.coinspot.com.au/pubapi",private:"https://www.coinspot.com.au/api"},www:"https://www.coinspot.com.au",doc:"https://www.coinspot.com.au/api"},api:{public:{get:["latest"]},private:{post:["orders","orders/history","my/coin/deposit","my/coin/send","quote/buy","quote/sell","my/balances","my/orders","my/buy","my/sell","my/buy/cancel","my/sell/cancel"]}},markets:{"BTC/AUD":{id:"BTC",symbol:"BTC/AUD",base:"BTC",quote:"AUD"},"LTC/AUD":{id:"LTC",symbol:"LTC/AUD",base:"LTC",quote:"AUD"},"DOGE/AUD":{id:"DOGE",symbol:"DOGE/AUD",base:"DOGE",quote:"AUD"}}})}async fetchBalance(e={}){let t=await this.privatePostMyBalances(),s={info:t};if("balance"in t){let e=t.balance,i=Object.keys(e);for(let t=0;t<i.length;t++){let o=i[t],a=o.toUpperCase(),r={free:e[o],used:0,total:e[o]};"DRK"===a&&(a="DASH"),s[a]=r}}return this.parseBalance(s)}async fetchOrderBook(e,t,s={}){let i=this.market(e),o=await this.privatePostOrders(this.extend({cointype:i.id},s));return this.parseOrderBook(o,void 0,"buyorders","sellorders","rate","amount")}async fetchTicker(e,t={}){let s=await this.publicGetLatest(t),i=this.marketId(e);i=i.toLowerCase();let o=s.prices[i],a=this.milliseconds(),r=this.safeFloat(o,"last");return{symbol:e,timestamp:a,datetime:this.iso8601(a),high:void 0,low:void 0,bid:this.safeFloat(o,"bid"),bidVolume:void 0,ask:this.safeFloat(o,"ask"),askVolume:void 0,vwap:void 0,open:void 0,close:r,last:r,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:void 0,quoteVolume:void 0,info:o}}fetchTrades(e,t,s,i={}){return this.privatePostOrdersHistory(this.extend({cointype:this.marketId(e)},i))}createOrder(e,s,i,o,a,r={}){let n="privatePostMy"+this.capitalize(i);if("market"===s)throw new t(this.id+" allows limit orders only");let c={cointype:this.marketId(e),amount:o,rate:a};return this[n](this.extend(c,r))}async cancelOrder(e,t,s={}){throw new i(this.id+" cancelOrder () is not fully implemented yet")}sign(e,t="public",i="GET",o={},a,r){if(!this.apiKey)throw new s(this.id+" requires apiKey for all requests");let n=this.urls.api[t]+"/"+e;if("private"===t){this.checkRequiredCredentials();let e=this.nonce();r=this.json(this.extend({nonce:e},o)),a={"Content-Type":"application/json",key:this.apiKey,sign:this.hmac(this.encode(r),this.encode(this.secret),"sha512")}}return{url:n,method:i,body:r,headers:a}}};
//# sourceMappingURL=coinspot.js.map