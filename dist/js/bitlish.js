"use strict";const e=require("./base/Exchange"),{NotSupported:t}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"bitlish",name:"Bitlish",countries:["GB","EU","RU"],rateLimit:1500,version:"v1",has:{CORS:!1,fetchTickers:!0,fetchOHLCV:!0,withdraw:!0},timeframes:{"1h":3600},urls:{logo:"https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg",api:"https://bitlish.com/api",www:"https://bitlish.com",doc:"https://bitlish.com/api"},requiredCredentials:{apiKey:!0,secret:!1},fees:{trading:{tierBased:!1,percentage:!0,taker:.003,maker:0},funding:{tierBased:!1,percentage:!1,withdraw:{BTC:.001,LTC:.001,DOGE:.001,ETH:.001,XMR:0,ZEC:.001,DASH:1e-4,EUR:50},deposit:{BTC:0,LTC:0,DOGE:0,ETH:0,XMR:0,ZEC:0,DASH:0,EUR:0}}},api:{public:{get:["instruments","ohlcv","pairs","tickers","trades_depth","trades_history"],post:["instruments","ohlcv","pairs","tickers","trades_depth","trades_history"]},private:{post:["accounts_operations","balance","cancel_trade","cancel_trades_by_ids","cancel_all_trades","create_bcode","create_template_wallet","create_trade","deposit","list_accounts_operations_from_ts","list_active_trades","list_bcodes","list_my_matches_from_ts","list_my_trades","list_my_trads_from_ts","list_payment_methods","list_payments","redeem_code","resign","signin","signout","trade_details","trade_options","withdraw","withdraw_by_id"]}},commonCurrencies:{DSH:"DASH",XDG:"DOGE"}})}async fetchMarkets(){let e=await this.publicGetPairs(),t=[],s=Object.keys(e);for(let i=0;i<s.length;i++){let a=e[s[i]],r=a.id,o=a.name,[d,n]=o.split("/");o=(d=this.commonCurrencyCode(d))+"/"+(n=this.commonCurrencyCode(n)),t.push({id:r,symbol:o,base:d,quote:n,info:a})}return t}parseTicker(e,t){let s=this.milliseconds(),i=void 0;t&&(i=t.symbol);let a=this.safeFloat(e,"last");return{timestamp:s,datetime:this.iso8601(s),symbol:i,high:this.safeFloat(e,"max"),low:this.safeFloat(e,"min"),bid:this.safeFloat(e,"bid"),bidVolume:void 0,ask:this.safeFloat(e,"ask"),askVolume:void 0,vwap:void 0,open:this.safeFloat(e,"first"),close:a,last:a,previousClose:void 0,change:void 0,percentage:100*this.safeFloat(e,"prc"),average:void 0,baseVolume:this.safeFloat(e,"sum"),quoteVolume:void 0,info:e}}async fetchTickers(e,t={}){await this.loadMarkets();let s=await this.publicGetTickers(t),i=Object.keys(s),a={};for(let e=0;e<i.length;e++){let t=i[e],r=this.markets_by_id[t],o=r.symbol,d=s[t];a[o]=this.parseTicker(d,r)}return a}async fetchTicker(e,t={}){await this.loadMarkets();let s=this.market(e),i=(await this.publicGetTickers(t))[s.id];return this.parseTicker(i,s)}async fetchOHLCV(e,t="1h",s,i,a={}){await this.loadMarkets();let r=this.seconds()-2592e3;void 0!==s&&(r=parseInt(s/1e3));let o=[r.toString(),void 0];return await this.publicPostOhlcv(this.extend({time_range:o},a))}async fetchOrderBook(e,t,s={}){await this.loadMarkets();let i=await this.publicGetTradesDepth(this.extend({pair_id:this.marketId(e)},s)),a=void 0,r=this.safeInteger(i,"last");return r&&(a=parseInt(r/1e3)),this.parseOrderBook(i,a,"bid","ask","price","volume")}parseTrade(e,t){let s="bid"===e.dir?"buy":"sell",i=void 0;t&&(i=t.symbol);let a=parseInt(e.created/1e3);return{id:void 0,info:e,timestamp:a,datetime:this.iso8601(a),symbol:i,order:void 0,type:void 0,side:s,price:e.price,amount:e.amount}}async fetchTrades(e,t,s,i={}){await this.loadMarkets();let a=this.market(e),r=await this.publicGetTradesHistory(this.extend({pair_id:a.id},i));return this.parseTrades(r.list,a,t,s)}async fetchBalance(e={}){await this.loadMarkets();let t=await this.privatePostBalance(),s={info:t},i=Object.keys(t),a={};for(let e=0;e<i.length;e++){let s=i[e],r=t[s];"DSH"===(s=s.toUpperCase())&&(s="DASH"),"XDG"===s&&(s="DOGE"),a[s]=r}i=Object.keys(this.currencies);for(let e=0;e<i.length;e++){let t=i[e],r=this.account();t in a&&(r.free=parseFloat(a[t].funds),r.used=parseFloat(a[t].holded),r.total=this.sum(r.free,r.used)),s[t]=r}return this.parseBalance(s)}signIn(){return this.privatePostSignin({login:this.login,passwd:this.password})}async createOrder(e,t,s,i,a,r={}){await this.loadMarkets();let o={pair_id:this.marketId(e),dir:"buy"===s?"bid":"ask",amount:i};"limit"===t&&(o.price=a);let d=await this.privatePostCreateTrade(this.extend(o,r));return{info:d,id:d.id}}async cancelOrder(e,t,s={}){return await this.loadMarkets(),await this.privatePostCancelTrade({id:e})}async withdraw(e,s,i,a,r={}){if(this.checkAddress(i),await this.loadMarkets(),"BTC"!==e)throw new t(this.id+" currently supports BTC withdrawals only, until they document other currencies...");let o=await this.privatePostWithdraw(this.extend({currency:e.toLowerCase(),amount:parseFloat(s),account:i,payment_method:"bitcoin"},r));return{info:o,id:o.message_id}}sign(e,t="public",s="GET",i={},a,r){let o=this.urls.api+"/"+this.version+"/"+e;return"public"===t?"GET"===s?Object.keys(i).length&&(o+="?"+this.urlencode(i)):(r=this.json(i),a={"Content-Type":"application/json"}):(this.checkRequiredCredentials(),r=this.json(this.extend({token:this.apiKey},i)),a={"Content-Type":"application/json"}),{url:o,method:s,body:r,headers:a}}};
//# sourceMappingURL=bitlish.js.map