"use strict";const e=require("./base/Exchange"),{ExchangeError:t}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"_1btcxe",name:"1BTCXE",countries:"PA",comment:"Crypto Capital API",has:{CORS:!0,withdraw:!0},timeframes:{"1d":"1year"},urls:{logo:"https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg",api:"https://1btcxe.com/api",www:"https://1btcxe.com",doc:"https://1btcxe.com/api-docs.php"},api:{public:{get:["stats","historical-prices","order-book","transactions"]},private:{post:["balances-and-info","open-orders","user-transactions","btc-deposit-address/get","btc-deposit-address/new","deposits/get","withdrawals/get","orders/new","orders/edit","orders/cancel","orders/status","withdrawals/new"]}}})}async fetchMarkets(){return[{id:"USD",symbol:"BTC/USD",base:"BTC",quote:"USD"},{id:"EUR",symbol:"BTC/EUR",base:"BTC",quote:"EUR"},{id:"CNY",symbol:"BTC/CNY",base:"BTC",quote:"CNY"},{id:"RUB",symbol:"BTC/RUB",base:"BTC",quote:"RUB"},{id:"CHF",symbol:"BTC/CHF",base:"BTC",quote:"CHF"},{id:"JPY",symbol:"BTC/JPY",base:"BTC",quote:"JPY"},{id:"GBP",symbol:"BTC/GBP",base:"BTC",quote:"GBP"},{id:"CAD",symbol:"BTC/CAD",base:"BTC",quote:"CAD"},{id:"AUD",symbol:"BTC/AUD",base:"BTC",quote:"AUD"},{id:"AED",symbol:"BTC/AED",base:"BTC",quote:"AED"},{id:"BGN",symbol:"BTC/BGN",base:"BTC",quote:"BGN"},{id:"CZK",symbol:"BTC/CZK",base:"BTC",quote:"CZK"},{id:"DKK",symbol:"BTC/DKK",base:"BTC",quote:"DKK"},{id:"HKD",symbol:"BTC/HKD",base:"BTC",quote:"HKD"},{id:"HRK",symbol:"BTC/HRK",base:"BTC",quote:"HRK"},{id:"HUF",symbol:"BTC/HUF",base:"BTC",quote:"HUF"},{id:"ILS",symbol:"BTC/ILS",base:"BTC",quote:"ILS"},{id:"INR",symbol:"BTC/INR",base:"BTC",quote:"INR"},{id:"MUR",symbol:"BTC/MUR",base:"BTC",quote:"MUR"},{id:"MXN",symbol:"BTC/MXN",base:"BTC",quote:"MXN"},{id:"NOK",symbol:"BTC/NOK",base:"BTC",quote:"NOK"},{id:"NZD",symbol:"BTC/NZD",base:"BTC",quote:"NZD"},{id:"PLN",symbol:"BTC/PLN",base:"BTC",quote:"PLN"},{id:"RON",symbol:"BTC/RON",base:"BTC",quote:"RON"},{id:"SEK",symbol:"BTC/SEK",base:"BTC",quote:"SEK"},{id:"SGD",symbol:"BTC/SGD",base:"BTC",quote:"SGD"},{id:"THB",symbol:"BTC/THB",base:"BTC",quote:"THB"},{id:"TRY",symbol:"BTC/TRY",base:"BTC",quote:"TRY"},{id:"ZAR",symbol:"BTC/ZAR",base:"BTC",quote:"ZAR"}]}async fetchBalance(e={}){let t=(await this.privatePostBalancesAndInfo())["balances-and-info"],s={info:t},i=Object.keys(this.currencies);for(let e=0;e<i.length;e++){let a=i[e],o=this.account();o.free=this.safeFloat(t.available,a,0),o.used=this.safeFloat(t.on_hold,a,0),o.total=this.sum(o.free,o.used),s[a]=o}return this.parseBalance(s)}async fetchOrderBook(e,t,s={}){let i=await this.publicGetOrderBook(this.extend({currency:this.marketId(e)},s));return this.parseOrderBook(i["order-book"],void 0,"bid","ask","price","order_amount")}async fetchTicker(e,t={}){let s=(await this.publicGetStats(this.extend({currency:this.marketId(e)},t))).stats,i=this.safeFloat(s,"last_price");return{symbol:e,timestamp:void 0,datetime:void 0,high:this.safeFloat(s,"max"),low:this.safeFloat(s,"min"),bid:this.safeFloat(s,"bid"),bidVolume:void 0,ask:this.safeFloat(s,"ask"),askVolume:void 0,vwap:void 0,open:this.safeFloat(s,"open"),close:i,last:i,previousClose:void 0,change:this.safeFloat(s,"daily_change"),percentage:void 0,average:void 0,baseVolume:void 0,quoteVolume:this.safeFloat(s,"total_btc_traded"),info:s}}parseOHLCV(e,t,s="1d",i,a){return[this.parse8601(e.date+" 00:00:00"),void 0,void 0,void 0,parseFloat(e.price),void 0]}async fetchOHLCV(e,t="1d",s,i,a={}){let o=this.market(e),r=await this.publicGetHistoricalPrices(this.extend({currency:o.id,timeframe:this.timeframes[t]},a)),d=this.omit(r["historical-prices"],"request_currency");return this.parseOHLCVs(d,o,t,s,i)}parseTrade(e,t){let s=1e3*parseInt(e.timestamp);return{id:e.id,info:e,timestamp:s,datetime:this.iso8601(s),symbol:t.symbol,order:void 0,type:void 0,side:e.maker_type,price:this.safeFloat(e,"price"),amount:this.safeFloat(e,"amount")}}async fetchTrades(e,t,s,i={}){let a=this.market(e),o=await this.publicGetTransactions(this.extend({currency:a.id},i)),r=this.omit(o.transactions,"request_currency");return this.parseTrades(r,a,t,s)}async createOrder(e,t,s,i,a,o={}){let r={side:s,type:t,currency:this.marketId(e),amount:i};"limit"===t&&(r.limit_price=a);let d=await this.privatePostOrdersNew(this.extend(r,o));return{info:d,id:d}}async cancelOrder(e,t,s={}){return await this.privatePostOrdersCancel({id:e})}async withdraw(e,t,s,i,a={}){this.checkAddress(s),await this.loadMarkets();let o=await this.privatePostWithdrawalsNew(this.extend({currency:e,amount:parseFloat(t),address:s},a));return{info:o,id:o.result.uuid}}sign(e,s="public",i="GET",a={},o,r){if("cryptocapital"===this.id)throw new t(this.id+" is an abstract base API for _1btcxe");let d=this.urls.api+"/"+e;if("public"===s)Object.keys(a).length&&(d+="?"+this.urlencode(a));else{this.checkRequiredCredentials();let e=this.extend({api_key:this.apiKey,nonce:this.nonce()},a),t=this.json(e);e.signature=this.hmac(this.encode(t),this.encode(this.secret)),r=this.json(e),o={"Content-Type":"application/json"}}return{url:d,method:i,body:r,headers:o}}async request(e,s="public",i="GET",a={},o,r){let d=await this.fetch2(e,s,i,a,o,r);if("errors"in d){let e=[];for(let t=0;t<d.errors.length;t++){let s=d.errors[t];e.push(s.code+": "+s.message)}throw e=e.join(" "),new t(this.id+" "+e)}return d}};
//# sourceMappingURL=_1btcxe.js.map