"use strict";const e=require("./base/Exchange"),{ExchangeError:t}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"shapeshift",name:"ShapeShift",countries:"CHE",version:void 0,userAgent:void 0,rateLimit:1e3,urls:{logo:"https://shapeshift.io/logo.png",api:"https://shapeshift.io",www:"https://shapeshift.io",doc:["https://info.shapeshift.io/api"]},has:{createOrder:!1,createMarketOrder:!1,createLimitOrder:!1,fetchBalance:!0,fetchCurrencies:!0,fetchL2OrderBook:!1,fetchMarkets:!0,fetchOHLCV:!1,fetchTicker:!0,fetchTrades:!1,privateAPI:!1,startInstantTransaction:!0},api:{public:{get:["getcoins","limit/{pair}","marketinfo/{pair}","rate/{pair}","recenttx/{max}","txStat/{address}"],post:["cancelpending","shift"]}},fees:{trading:{tierBased:!1,percentage:!1}},requiredCredentials:{apiKey:!1,secret:!1}})}sign(e,t="public",i="GET",a={},s,r){const o="/"+this.implodeParams(e,a),n=this.urls.api+o;return"POST"===i&&(s={"Content-Type":"application/json"},a.apiKey=this.apiKey,r=JSON.stringify(a)),{url:n,method:i,body:r,headers:s}}async instantTransactionStatus(e,t={}){return this.publicGetTxStatAddress({address:e})}async startInstantTransaction(e,i,a,s,r={}){await this.loadMarkets();const o=`${e.toUpperCase()}/${i.toUpperCase()}`,n=`${i.toUpperCase()}/${e.toUpperCase()}`;if(!this.markets[o]&&!this.markets[n])throw new t(`Market ${e} to ${i} does not exist.`);const c=`${e.toLowerCase()}_${i.toLowerCase()}`,d={withdrawal:s.toLowerCase(),pair:c,returnAddress:s.toLowerCase()},p=await this.publicPostShift(this.extend(r,d));if(p.error)throw new t(p.error);return{transactionId:p.deposit,depositAddress:p.deposit,info:p}}async fetchOrderBook(e,t,i={}){const[a,s]=e.split("/"),r=`${a.toLowerCase()}_${s.toLowerCase()}`,o=`${s.toLowerCase()}_${a.toLowerCase()}`,[n,c]=await Promise.all([this.publicGetMarketinfoPair({pair:r}),this.publicGetMarketinfoPair({pair:o})]),d=new Date;return{timestamp:d.getTime(),datetime:d.toISOString(),nonce:void 0,bids:[[n.rate,n.limit]],asks:[[1/c.rate,c.rate*c.limit]]}}calculateFee(e,t,i,a,s,r="taker",o={}){const[n,c]=e.split("/"),{info:d}=this.markets[e];return{type:void 0,currency:c,rate:void 0,cost:d.minerFee}}async fetchTicker(e,t={}){await this.loadMarkets();const i=this.market(e).info,a=new Date;return{symbol:e,info:i,timestamp:a.getTime(),datetime:a.toISOString(),high:void 0,low:void 0,bid:void 0,bidVolume:void 0,ask:"",askVolume:void 0,vwap:void 0,open:void 0,close:void 0,last:void 0,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:void 0,quoteVolume:void 0}}async fetchCurrencies(e={}){const t=await this.publicGetGetcoins(),i=Object.keys(t),a={};for(let e=0,s=i.length;e<s;e++){const s=t[i[e]],r=s.symbol;a[r]={id:r,code:r,info:s,name:s.name,active:"available"===s.status,status:"ok",fee:void 0,precision:void 0,limits:{amount:{min:void 0,max:void 0},price:{min:void 0,max:void 0},cost:{min:void 0,max:void 0},withdraw:{min:void 0,max:void 0}}}}return a}async fetchMarkets(){const e=await this.publicGetMarketinfoPair({pair:""}),t=e.length,i=new Array(t);for(let a=0;a<t;a++){const t=e[a],[s,r]=t.pair.split("_");i[a]={id:t.pair,symbol:`${s}/${r}`,base:s,quote:r,active:!0,precision:{amount:8},limits:{amount:{min:t.min,max:t.limit}},info:t}}return i}};
//# sourceMappingURL=shapeshift.js.map