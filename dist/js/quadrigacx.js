"use strict";const e=require("./base/Exchange"),{ExchangeError:t,AuthenticationError:i}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"quadrigacx",name:"QuadrigaCX",countries:"CA",rateLimit:1e3,version:"v2",has:{fetchDepositAddress:!0,CORS:!0,withdraw:!0},urls:{logo:"https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg",api:"https://api.quadrigacx.com",www:"https://www.quadrigacx.com",doc:"https://www.quadrigacx.com/api_info"},requiredCredentials:{apiKey:!0,secret:!0,uid:!0},api:{public:{get:["order_book","ticker","transactions"]},private:{post:["balance","bitcoin_deposit_address","bitcoin_withdrawal","bitcoincash_deposit_address","bitcoincash_withdrawal","bitcoingold_deposit_address","bitcoingold_withdrawal","buy","cancel_order","ether_deposit_address","ether_withdrawal","litecoin_deposit_address","litecoin_withdrawal","lookup_order","open_orders","sell","user_transactions"]}},markets:{"BTC/CAD":{id:"btc_cad",symbol:"BTC/CAD",base:"BTC",quote:"CAD",maker:.005,taker:.005},"BTC/USD":{id:"btc_usd",symbol:"BTC/USD",base:"BTC",quote:"USD",maker:.005,taker:.005},"ETH/BTC":{id:"eth_btc",symbol:"ETH/BTC",base:"ETH",quote:"BTC",maker:.002,taker:.002},"ETH/CAD":{id:"eth_cad",symbol:"ETH/CAD",base:"ETH",quote:"CAD",maker:.005,taker:.005},"LTC/CAD":{id:"ltc_cad",symbol:"LTC/CAD",base:"LTC",quote:"CAD",maker:.005,taker:.005},"LTC/BTC":{id:"ltc_btc",symbol:"LTC/BTC",base:"LTC",quote:"BTC",maker:.005,taker:.005},"BCH/CAD":{id:"bch_cad",symbol:"BCH/CAD",base:"BCH",quote:"CAD",maker:.005,taker:.005},"BCH/BTC":{id:"bch_btc",symbol:"BCH/BTC",base:"BCH",quote:"BTC",maker:.005,taker:.005},"BTG/CAD":{id:"btg_cad",symbol:"BTG/CAD",base:"BTG",quote:"CAD",maker:.005,taker:.005},"BTG/BTC":{id:"btg_btc",symbol:"BTG/BTC",base:"BTG",quote:"BTC",maker:.005,taker:.005}}})}async fetchBalance(e={}){let t=await this.privatePostBalance(),i={info:t},s=Object.keys(this.currencies);for(let e=0;e<s.length;e++){let a=s[e],r=a.toLowerCase(),o={free:parseFloat(t[r+"_available"]),used:parseFloat(t[r+"_reserved"]),total:parseFloat(t[r+"_balance"])};i[a]=o}return this.parseBalance(i)}async fetchOrderBook(e,t,i={}){let s=await this.publicGetOrderBook(this.extend({book:this.marketId(e)},i)),a=1e3*parseInt(s.timestamp);return this.parseOrderBook(s,a)}async fetchTicker(e,t={}){let i=await this.publicGetTicker(this.extend({book:this.marketId(e)},t)),s=1e3*parseInt(i.timestamp),a=this.safeFloat(i,"vwap"),r=this.safeFloat(i,"volume"),o=r*a,d=this.safeFloat(i,"last");return{symbol:e,timestamp:s,datetime:this.iso8601(s),high:this.safeFloat(i,"high"),low:this.safeFloat(i,"low"),bid:this.safeFloat(i,"bid"),bidVolume:void 0,ask:this.safeFloat(i,"ask"),askVolume:void 0,vwap:a,open:void 0,close:d,last:d,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:r,quoteVolume:o,info:i}}parseTrade(e,t){let i=1e3*parseInt(e.date);return{info:e,timestamp:i,datetime:this.iso8601(i),symbol:t.symbol,id:e.tid.toString(),order:void 0,type:void 0,side:e.side,price:this.safeFloat(e,"price"),amount:this.safeFloat(e,"amount")}}async fetchTrades(e,t,i,s={}){let a=this.market(e),r=await this.publicGetTransactions(this.extend({book:a.id},s));return this.parseTrades(r,a,t,i)}async createOrder(e,t,i,s,a,r={}){let o="privatePost"+this.capitalize(i),d={amount:s,book:this.marketId(e)};"limit"===t&&(d.price=a);let n=await this[o](this.extend(d,r));return{info:n,id:n.id.toString()}}async cancelOrder(e,t,i={}){return await this.privatePostCancelOrder(this.extend({id:e},i))}async fetchDepositAddress(e,t={}){let i="privatePost"+this.getCurrencyName(e)+"DepositAddress",s=await this[i](t),a=void 0,r=void 0;return s.indexOf("rror")>=0?r="error":(a=s,r="ok"),this.checkAddress(a),{currency:e,address:a,status:r,info:this.last_http_response}}getCurrencyName(e){return{ETH:"Ether",BTC:"Bitcoin",LTC:"Litecoin",BCH:"Bitcoincash",BTG:"Bitcoingold"}[e]}async withdraw(e,t,i,s,a={}){this.checkAddress(i),await this.loadMarkets();let r={amount:t,address:i},o="privatePost"+this.getCurrencyName(e)+"Withdrawal";return{info:await this[o](this.extend(r,a)),id:void 0}}sign(e,t="public",i="GET",s={},a,r){let o=this.urls.api+"/"+this.version+"/"+e;if("public"===t)o+="?"+this.urlencode(s);else{this.checkRequiredCredentials();let e=this.nonce(),t=[e.toString(),this.uid,this.apiKey].join(""),i=this.hmac(this.encode(t),this.encode(this.secret)),o=this.extend({key:this.apiKey,nonce:e,signature:i},s);r=this.json(o),a={"Content-Type":"application/json"}}return{url:o,method:i,body:r,headers:a}}handleErrors(e,t,s,a,r,o){if("string"==typeof o&&!(o.length<2)&&200===e&&o.indexOf("Invalid API Code or Invalid Signature")>=0)throw new i(this.id+" "+o)}async request(e,i="public",s="GET",a={},r,o){let d=await this.fetch2(e,i,s,a,r,o);if("string"==typeof d)return d;if("error"in d)throw new t(this.id+" "+this.json(d));return d}};
//# sourceMappingURL=quadrigacx.js.map