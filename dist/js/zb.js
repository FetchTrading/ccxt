"use strict";const e=require("./base/Exchange"),{ExchangeError:t,AuthenticationError:r,InsufficientFunds:i,OrderNotFound:s,ExchangeNotAvailable:a,DDoSProtection:o,InvalidOrder:d}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"zb",name:"ZB",countries:"CN",rateLimit:1e3,version:"v1",has:{CORS:!1,createMarketOrder:!1,fetchOrder:!0,fetchOrders:!0,fetchOpenOrders:!0,withdraw:!0},timeframes:{"1m":"1min","3m":"3min","5m":"5min","15m":"15min","30m":"30min","1h":"1hour","2h":"2hour","4h":"4hour","6h":"6hour","12h":"12hour","1d":"1day","3d":"3day","1w":"1week"},exceptions:{1001:t,1002:t,1003:r,1004:r,1005:r,1006:r,1009:a,2001:i,2002:i,2003:i,2005:i,2006:i,2007:i,2009:i,3001:s,3002:d,3003:d,3004:r,3005:t,3006:r,3007:r,3008:s,4001:a,4002:o},urls:{logo:"https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg",api:{public:"http://api.zb.com/data",private:"https://trade.zb.com/api"},www:"https://www.zb.com",doc:"https://www.zb.com/i/developer",fees:"https://www.zb.com/i/rate"},api:{public:{get:["markets","ticker","depth","trades","kline"]},private:{get:["order","cancelOrder","getOrder","getOrders","getOrdersNew","getOrdersIgnoreTradeType","getUnfinishedOrdersIgnoreTradeType","getAccountInfo","getUserAddress","getWithdrawAddress","getWithdrawRecord","getChargeRecord","getCnyWithdrawRecord","getCnyChargeRecord","withdraw","getLeverAssetsInfo","getLeverBills","transferInLever","transferOutLever","loan","cancelLoan","getLoans","getLoanRecords","borrow","repay","getRepayments"]}},fees:{funding:{withdraw:{BTC:1e-4,BCH:6e-4,LTC:.005,ETH:.01,ETC:.01,BTS:3,EOS:1,QTUM:.01,HSR:.001,XRP:.1,USDT:"0.1%",QCASH:5,DASH:.002,BCD:0,UBTC:0,SBTC:0,INK:20,TV:.1,BTH:0,BCX:0,LBTC:0,CHAT:20,bitCNY:20,HLC:20,BTP:0,BCW:0}},trading:{maker:.002,taker:.002}},commonCurrencies:{ENT:"ENTCash"}})}async fetchMarkets(){let e=await this.publicGetMarkets(),t=Object.keys(e),r=[];for(let i=0;i<t.length;i++){let s=t[i],a=e[s],[o,d]=s.split("_"),n=this.commonCurrencyCode(o.toUpperCase()),h=this.commonCurrencyCode(d.toUpperCase()),c=n+"/"+h,l={amount:a.amountScale,price:a.priceScale},m=Math.pow(10,-l.amount);r.push({id:s,symbol:c,baseId:o,quoteId:d,base:n,quote:h,lot:m,active:!0,precision:l,limits:{amount:{min:m,max:void 0},price:{min:Math.pow(10,-l.price),max:void 0},cost:{min:0,max:void 0}},info:a})}return r}async fetchBalance(e={}){await this.loadMarkets();let t=await this.privateGetGetAccountInfo(e),r=t.result.coins,i={info:t};for(let e=0;e<r.length;e++){let t=r[e],s=this.account(),a=t.key;a=a in this.currencies_by_id?this.currencies_by_id[a].code:this.commonCurrencyCode(t.enName),s.free=parseFloat(t.available),s.used=parseFloat(t.freez),s.total=this.sum(s.free,s.used),i[a]=s}return this.parseBalance(i)}getMarketFieldName(){return"market"}async fetchOrderBook(e,t,r={}){await this.loadMarkets();let i=this.market(e),s={};s[this.getMarketFieldName()]=i.id;let a=await this.publicGetDepth(this.extend(s,r));return this.parseOrderBook(a)}async fetchTicker(e,t={}){await this.loadMarkets();let r=this.market(e),i={};i[this.getMarketFieldName()]=r.id;let s=(await this.publicGetTicker(this.extend(i,t))).ticker,a=this.milliseconds(),o=this.safeFloat(s,"last");return{symbol:e,timestamp:a,datetime:this.iso8601(a),high:this.safeFloat(s,"high"),low:this.safeFloat(s,"low"),bid:this.safeFloat(s,"buy"),bidVolume:void 0,ask:this.safeFloat(s,"sell"),askVolume:void 0,vwap:void 0,open:void 0,close:o,last:o,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:this.safeFloat(s,"vol"),quoteVolume:void 0,info:s}}async fetchOHLCV(e,t="1m",r,i,s={}){await this.loadMarkets();let a=this.market(e);void 0===i&&(i=1e3);let o={market:a.id,type:this.timeframes[t],limit:i};void 0!==r&&(o.since=r);let d=await this.publicGetKline(this.extend(o,s));return this.parseOHLCVs(d.data,a,t,r,i)}parseTrade(e,t){let r=1e3*e.date,i="bid"===e.trade_type?"buy":"sell";return{info:e,id:e.tid.toString(),timestamp:r,datetime:this.iso8601(r),symbol:t.symbol,type:void 0,side:i,price:this.safeFloat(e,"price"),amount:this.safeFloat(e,"amount")}}async fetchTrades(e,t,r,i={}){await this.loadMarkets();let s=this.market(e),a={};a[this.getMarketFieldName()]=s.id;let o=await this.publicGetTrades(this.extend(a,i));return this.parseTrades(o,s,t,r)}async createOrder(e,t,r,i,s,a={}){if("limit"!==t)throw new d(this.id+" allows limit orders only");await this.loadMarkets();let o={price:this.priceToPrecision(e,s),amount:this.amountToString(e,i),tradeType:"buy"===r?"1":"0",currency:this.marketId(e)},n=await this.privateGetOrder(this.extend(o,a));return{info:n,id:n.id}}async cancelOrder(e,t,r={}){await this.loadMarkets();let i={id:e.toString(),currency:this.marketId(t)};return i=this.extend(i,r),await this.privateGetCancelOrder(i)}async fetchOrder(e,r,i={}){if(void 0===r)throw new t(this.id+" fetchOrder() requires a symbol argument");await this.loadMarkets();let s={id:e.toString(),currency:this.marketId(r)};s=this.extend(s,i);let a=await this.privateGetGetOrder(s);return this.parseOrder(a,void 0)}async fetchOrders(e,r,i=50,a={}){if(!e)throw new t(this.id+"fetchOrders requires a symbol parameter");await this.loadMarkets();let o=this.market(e),d={currency:o.id,pageIndex:1,pageSize:i},n="privateGetGetOrdersIgnoreTradeType";"tradeType"in a&&(n="privateGetGetOrdersNew");let h=void 0;try{h=await this[n](this.extend(d,a))}catch(e){if(e instanceof s)return[];throw e}return this.parseOrders(h,o,r,i)}async fetchOpenOrders(e,r,i=10,a={}){if(!e)throw new t(this.id+"fetchOpenOrders requires a symbol parameter");await this.loadMarkets();let o=this.market(e),d={currency:o.id,pageIndex:1,pageSize:i},n="privateGetGetUnfinishedOrdersIgnoreTradeType";"tradeType"in a&&(n="privateGetGetOrdersNew");let h=void 0;try{h=await this[n](this.extend(d,a))}catch(e){if(e instanceof s)return[];throw e}return this.parseOrders(h,o,r,i)}parseOrder(e,t){let r=1===e.type?"buy":"sell",i=void 0,s=this.getCreateDateField();s in e&&(i=e[s]);let a=void 0;"currency"in e&&(t=this.marketsById[e.currency]),t&&(a=t.symbol);let o=e.price,d=e.trade_amount,n=e.total_amount,h=n-d,c=e.trade_money,l=this.safeString(e,"status");return void 0!==l&&(l=this.parseOrderStatus(l)),{info:e,id:e.id,timestamp:i,datetime:this.iso8601(i),lastTradeTimestamp:void 0,symbol:a,type:"limit",side:r,price:o,average:void 0,cost:c,amount:n,filled:d,remaining:h,status:l,fee:void 0}}parseOrderStatus(e){const t={0:"open",1:"canceled",2:"closed",3:"open"};return e in t?t[e]:e}getCreateDateField(){return"trade_date"}nonce(){return this.milliseconds()}sign(e,t="public",r="GET",i={},s,a){let o=this.urls.api[t];if("public"===t)o+="/"+this.version+"/"+e,Object.keys(i).length&&(o+="?"+this.urlencode(i));else{let t=this.keysort(this.extend({method:e,accesskey:this.apiKey},i)),r=this.nonce();t=this.keysort(t);let s=this.rawencode(t),a=this.hash(this.encode(this.secret),"sha1");o+="/"+e+"?"+s+"&"+("sign="+this.hmac(this.encode(s),this.encode(a),"md5")+"&reqTime="+r.toString())}return{url:o,method:r,body:a,headers:s}}handleErrors(e,r,i,s,a,o){if("string"==typeof o&&!(o.length<2)&&"{"===o[0]){let e=JSON.parse(o);if("code"in e){let r=this.safeString(e,"code"),i=this.id+" "+this.json(e);if(r in this.exceptions){throw new(0,this.exceptions[r])(i)}if("1000"!==r)throw new t(i)}}}};
//# sourceMappingURL=zb.js.map