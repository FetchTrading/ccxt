"use strict";const e=require("./base/Exchange"),{ExchangeError:t,AuthenticationError:i}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"ice3x",name:"ICE3X",countries:"ZA",rateLimit:1e3,has:{fetchCurrencies:!0,fetchTickers:!0,fetchOrder:!0,fetchOpenOrders:!0,fetchMyTrades:!0,fetchDepositAddress:!0},urls:{logo:"https://user-images.githubusercontent.com/1294454/38012176-11616c32-3269-11e8-9f05-e65cf885bb15.jpg",api:"https://ice3x.com/api/v1",www:["https://ice3x.com","https://ice3x.co.za"],doc:"https://ice3x.co.za/ice-cubed-bitcoin-exchange-api-documentation-1-june-2017",fees:["https://help.ice3.com/support/solutions/articles/11000033293-trading-fees","https://help.ice3.com/support/solutions/articles/11000033288-fees-explained","https://help.ice3.com/support/solutions/articles/11000008131-what-are-your-fiat-deposit-and-withdrawal-fees-","https://help.ice3.com/support/solutions/articles/11000033289-deposit-fees"]},api:{public:{get:["currency/list","currency/info","pair/list","pair/info","stats/marketdepthfull","stats/marketdepthbtcav","stats/marketdepth","orderbook/info","trade/list","trade/info"]},private:{post:["balance/list","balance/info","order/new","order/cancel","order/list","order/info","trade/list","trade/info","transaction/list","transaction/info","invoice/list","invoice/info","invoice/pdf"]}},fees:{trading:{maker:.01,taker:.01}},precision:{amount:8,price:8}})}async fetchCurrencies(e={}){let t=(await this.publicGetCurrencyList(e)).response.entities,i=this.precision.amount,s={};for(let e=0;e<t.length;e++){let r=t[e],a=r.currency_id,o=this.commonCurrencyCode(r.iso.toUpperCase());s[o]={id:a,code:o,name:r.name,active:!0,status:"ok",precision:i,limits:{amount:{min:void 0,max:Math.pow(10,i)},price:{min:Math.pow(10,-i),max:Math.pow(10,i)},cost:{min:void 0,max:void 0}},info:r}}return s}async fetchMarkets(){Object.keys(this.currencies).length||(this.currencies=await this.fetchCurrencies()),this.currencies_by_id=this.indexBy(this.currencies,"id");let e=(await this.publicGetPairList()).response.entities,t=[];for(let i=0;i<e.length;i++){let s=e[i],r=s.pair_id,a=s.currency_id_from.toString(),o=s.currency_id_to.toString(),n=this.currencies_by_id[a],c=this.currencies_by_id[o],d=this.commonCurrencyCode(n.code),h=this.commonCurrencyCode(c.code),l=d+"/"+h;t.push({id:r,symbol:l,base:d,quote:h,baseId:a,quoteId:o,active:!0,lot:void 0,info:s})}return t}parseTicker(e,t){let i=this.milliseconds(),s=t.symbol,r=this.safeFloat(e,"last_price");return{symbol:s,timestamp:i,datetime:this.iso8601(i),high:this.safeFloat(e,"max"),low:this.safeFloat(e,"min"),bid:this.safeFloat(e,"max_bid"),bidVolume:void 0,ask:this.safeFloat(e,"min_ask"),askVolume:void 0,vwap:void 0,open:void 0,close:r,last:r,previousClose:void 0,change:void 0,percentage:void 0,average:this.safeFloat(e,"avg"),baseVolume:void 0,quoteVolume:this.safeFloat(e,"vol"),info:e}}async fetchTicker(e,t={}){await this.loadMarkets();let i=this.market(e),s=await this.publicGetStatsMarketdepthfull(this.extend({pair_id:i.id},t));return this.parseTicker(s.response.entity,i)}async fetchTickers(e,t={}){await this.loadMarkets();let i=(await this.publicGetStatsMarketdepthfull(t)).response.entities,s={};for(let e=0;e<i.length;e++){let t=i[e],r=this.marketsById[t.pair_id];s[r.symbol]=this.parseTicker(t,r)}return s}async fetchOrderBook(e,t={}){await this.loadMarkets();let i=(await this.publicGetOrderbookInfo(this.extend({pair_id:this.marketId(e)},t))).response.entities;return this.parseOrderBook(i,void 0,"bids","asks","price","amount")}parseTrade(e,t){let i=1e3*parseInt(e.created),s=this.safeFloat(e,"price"),r=this.safeFloat(e,"volume"),a=t.symbol,o=parseFloat(this.costToPrecision(a,s*r)),n=this.safeFloat(e,"fee");return n&&(n={cost:n,currency:t.quote}),{timestamp:i,datetime:this.iso8601(i),symbol:a,id:this.safeString(e,"trade_id"),order:void 0,type:"limit",side:e.type,price:s,amount:r,cost:o,fee:n,info:e}}async fetchTrades(e,t,i,s={}){await this.loadMarkets();let r=this.market(e),a=(await this.publicGetTradeList(this.extend({pair_id:r.id},s))).response.entities;return this.parseTrades(a,r,t,i)}async fetchBalance(e={}){await this.loadMarkets();let t=await this.privatePostBalanceList(e),i={info:t},s=t.response.entities;for(let e=0;e<s.length;e++){let t=s[e],r=t.currency_id;if(r in this.currencies_by_id){i[this.currencies_by_id[r].code]={free:0,used:0,total:parseFloat(t.balance)}}}return this.parseBalance(i)}parseOrder(e,t){let i=this.safeInteger(e,"pair_id"),s=void 0;i&&!t&&i in this.marketsById&&(s=(t=this.marketsById[i]).symbol);let r=1e3*this.safeInteger(e,"created"),a=this.safeFloat(e,"price"),o=this.safeFloat(e,"volume"),n=this.safeInteger(e,"active"),c=this.safeFloat(e,"remaining"),d=void 0;1===n?n="open":(n="closed",c=0,d=o);let h=this.safeFloat(e,"fee");return h&&(h={cost:h},t&&(h.currency=t.quote)),{id:this.safeString(e,"order_id"),datetime:this.iso8601(r),timestamp:r,lastTradeTimestamp:void 0,status:n,symbol:s,type:"limit",side:e.type,price:a,cost:void 0,amount:o,filled:d,remaining:c,trades:void 0,fee:h,info:e}}async createOrder(e,t,i,s,r,a={}){await this.loadMarkets();let o=this.market(e),n=await this.privatePostOrderNew(this.extend({pair_id:o.id,type:i,amount:s,price:r},a)),c=this.parseOrder({order_id:n.response.entity.order_id,created:this.seconds(),active:1,type:i,price:r,volume:s,remaining:s,info:n},o),d=c.id;return this.orders[d]=c,c}async cancelOrder(e,t,i={}){return await this.privatePostOrderCancel(this.extend({order_id:e},i))}async fetchOrder(e,t,i={}){await this.loadMarkets();let s=await this.privatePostOrderInfo(this.extend({"order _id":e},i));return this.parseOrder(s.response.entity)}async fetchOpenOrders(e,t,i,s={}){await this.loadMarkets();let r=(await this.privatePostOrderList()).response.entities;return this.parseOrders(r,void 0,t,i)}async fetchMyTrades(e,t,i,s={}){await this.loadMarkets();let r=this.market(e),a={pair_id:r.id};i&&(a.items_per_page=i),t&&(a.date_from=parseInt(t/1e3));let o=(await this.privatePostTradeList(this.extend(a,s))).response.entities;return this.parseTrades(o,r,t,i)}async fetchDepositAddress(e,t={}){await this.loadMarkets();let i=this.currency(e),s=await this.privatePostBalanceInfo(this.extend({currency_id:i.id},t)),r=s.response.entity,a=this.safeString(r,"address");return{currency:e,address:a,tag:void 0,status:a?"ok":"none",info:s}}sign(e,t="public",i="GET",s={},r,a){let o=this.urls.api+"/"+e;return"public"===t?(s=this.urlencode(s)).length&&(o+="?"+s):(this.checkRequiredCredentials(),a=this.urlencode(this.extend({nonce:this.nonce()},s)),r={"Content-Type":"application/x-www-form-urlencoded",Key:this.apiKey,Sign:this.hmac(this.encode(a),this.encode(this.secret),"sha512")}),{url:o,method:i,body:a,headers:r}}async request(e,s="public",r="GET",a={},o,n){let c=await this.fetch2(e,s,r,a,o,n),d=this.safeValue(c,"errors"),h=this.safeValue(c,"response");if(d||!h){let e=["Key","user_id","Sign"];for(let t=0;t<e.length;t++){let s=e[t],r=this.safeString(d,s);if(r&&!("user_id"===s&&r.indexOf("authorization")<0))throw new i(r)}throw new t(this.json(d))}return c}};
//# sourceMappingURL=ice3x.js.map