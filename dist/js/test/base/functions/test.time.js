"use strict";const{setTimeout_safe:e,timeout:t,now:s,isWindows:o}=require("../../../../ccxt"),{strictEqual:i}=require("assert"),r=(e,t)=>i(!0,Math.abs(e-t)<=20),a=(e,t)=>t.then(()=>{throw new Error("not rejected!")}).catch(t=>{i(t.message,e)});it("setTimeout_safe is working",t=>{if(o)t();else{const o=s(),i=[];e(()=>{r(i[0].ms_asked,250),r(i[1].ms_asked,150),r(i[2].ms_asked,50),t()},250,(e,t)=>(i.push({when:s()-o,ms_asked:t}),setTimeout(e,100)))}}),it("setTimeout_safe canceling is working",t=>{const s=e(()=>{throw new Error("shouldnt happen!")},250,(e,t)=>setTimeout(e,100));setTimeout(()=>{s()},200),setTimeout(()=>{t()},400)}),it("timeout() is working",async()=>{i("foo",await t(200,new Promise(e=>setTimeout(()=>e("foo"),100)))),await a("foo",t(100,Promise.reject(new Error("foo")))),await a("timed out",t(100,new Promise((e,t)=>setTimeout(()=>t(new Error("foo")),200))))});
//# sourceMappingURL=test.time.js.map