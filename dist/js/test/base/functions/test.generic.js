"use strict";const{deepExtend:o,groupBy:f,filterBy:r,omit:t,sum:a,sortBy:b}=require("../../../../ccxt"),{strictEqual:e,deepEqual:s}=require("assert");it("deepExtend() works",()=>{const f=o(...[{a:1,b:2,d:{a:1,b:[],c:{test1:123,test2:321}},f:5,g:123,i:321,j:[1,2]},{b:3,c:5,d:{b:{first:"one",second:"two"},c:{test2:222}},e:{one:1,two:2},f:[{foo:"bar"}],g:void 0,h:/abc/g,i:null,j:[3,4]}]);s({a:1,b:3,d:{a:1,b:{first:"one",second:"two"},c:{test1:123,test2:222}},f:[{foo:"bar"}],g:void 0,c:5,e:{one:1,two:2},h:/abc/g,i:null,j:[3,4]},f),s(o(void 0,void 0,{foo:"bar"}),{foo:"bar"})}),it("groupBy() works",()=>{s(f([{foo:"a"},{foo:"b"},{foo:"c"},{foo:"b"},{foo:"c"},{foo:"c"}],"foo"),{a:[{foo:"a"}],b:[{foo:"b"},{foo:"b"}],c:[{foo:"c"},{foo:"c"},{foo:"c"}]})}),it("filterBy() works",()=>{s(r([{foo:"a"},{foo:void 0},{foo:"b"},{},{foo:"a",bar:"b"},{foo:"c"},{foo:"d"},{foo:"b"},{foo:"c"},{foo:"c"}],"foo","a"),[{foo:"a"},{foo:"a",bar:"b"}])}),it("omit works",()=>{s(t({},"foo"),{}),s(t({foo:2},"foo"),{}),s(t({foo:2,bar:3},"foo"),{bar:3}),s(t({foo:2,bar:3},["foo"]),{bar:3}),s(t({foo:2,bar:3}),{foo:2,bar:3}),s(t({foo:2,bar:3},"foo","bar"),{}),s(t({foo:2,bar:3},["foo"],"bar"),{}),s(t({5:2,bar:3},[5]),{bar:3}),s(t({5:2,bar:3},5),{bar:3})}),it("sum works",()=>{e(void 0,a()),e(2,a(2)),e(432,a(2,30,400)),e(432,a(2,void 0,[88],30,"7",400,null))}),it("sortBy works",()=>{const o=[{x:5},{x:2},{x:4},{x:0},{x:1},{x:3}];b(o,"x"),s(o[{x:5}]),s(b(o,"x",!0),[{x:5},{x:4},{x:3},{x:2},{x:1},{x:0}]),s(b([],"x"),[])});
//# sourceMappingURL=test.generic.js.map