"use strict";global.log=require("ololog");const{Exchange:e,keys:r,values:s,unique:t,index:a,aggregate:o}=require("../../../ccxt"),{strictEqual:i,deepEqual:c}=require("assert");describe("ccxt base code",()=>{require("./functions/test.generic"),require("./functions/test.number"),require("./functions/test.time"),require("./functions/test.type"),require("./functions/test.datetime"),it("calculateFee() works",()=>{const r={taker:.0025,maker:.001},s={id:"foobar",symbol:"FOO/BAR",base:"FOO",quote:"BAR",taker:.0025,maker:.001,precision:{amount:8,price:8}},t=new e({id:"mock",markets:{"FOO/BAR":s}});Object.keys(r).forEach(e=>{const a=t.calculateFee(s.symbol,"limit","sell",10,100,e,{});c(a,{type:e,currency:"BAR",rate:r[e],cost:10*r[e]*100})})}),it("getCurrencyUsedOnOpenOrders() works",()=>{const r=new e({orders:[{status:"open",symbol:"ETH/BTC",side:"sell",price:200,amount:21,remaining:20},{status:"open",symbol:"ETH/BTC",side:"buy",price:200,amount:22,remaining:20},{status:"open",symbol:"ETH/BTC",side:"sell",price:200,amount:23,remaining:20},{status:"closed",symbol:"BTC/USD",side:"sell",price:10,amount:11,remaining:10},{status:"open",symbol:"BTC/USD",side:"buy",price:10,amount:12,remaining:10},{status:"open",symbol:"BTC/USD",side:"sell",price:10,amount:13,remaining:10}],markets:{"ETH/BTC":{id:"ETH/BTC",symbol:"ETH/BTC",base:"ETH",quote:"BTC"},"BTC/USD":{id:"BTC/USD",symbol:"BTC/USD",base:"BTC",quote:"USD"}}});i(r.getCurrencyUsedOnOpenOrders("LTC"),0),i(r.getCurrencyUsedOnOpenOrders("ETH"),40),i(r.getCurrencyUsedOnOpenOrders("USD"),100),i(r.getCurrencyUsedOnOpenOrders("BTC"),4010)}),it.skip("exchange config extension works",()=>{cost={min:.001,max:1e3},precision={amount:3};const e=new binance({markets:{"ETH/BTC":{limits:{cost:cost},precision:precision}}});c(e.markets["ETH/BTC"].limits.cost,cost),c(e.markets["ETH/BTC"].precision,{price:6,amount:3}),c(e.markets["ETH/BTC"].symbol,"ETH/BTC")}),it("aggregate() works",()=>{c(o([[789.1,123],[789.1,123],[123,456],[789,123],[789.1,123]].sort()),[[123,456],[789,123],[789.1,369]]),c(o([[123,456],[789,123],[789.1,123]].sort()),[[123,456],[789,123],[789.1,123]]),c(o([]),[])}),it("parseBalance() works",()=>{const r=new e({markets:{"ETH/BTC":{id:"ETH/BTC",symbol:"ETH/BTC",base:"ETH",quote:"BTC"}}}).parseBalance({ETH:{free:10,used:10,total:20},ZEC:{free:0,used:0,total:0}});c(r,{ETH:{free:10,used:10,total:20},ZEC:{free:0,used:0,total:0},free:{ETH:10,ZEC:0},used:{ETH:10,ZEC:0},total:{ETH:20,ZEC:0}})}),it("camelCase/camel_case property conversion works",()=>{const r=new e({id:"mock"}),s=a(["isNode","empty","keys","values","extend","clone","index","ordered","unique","keysort","indexBy","groupBy","filterBy","sortBy","flatten","pluck","omit","sum","deepExtend","uuid","unCamelCase","capitalize","isNumber","isArray","isObject","isString","isStringCoercible","isDictionary","hasProps","prop","asFloat","asInteger","safeFloat","safeInteger","safeValue","safeString","decimal","toFixed","truncate","truncateToString","precisionFromString","stringToBinary","stringToBase64","utf16ToBase64","base64ToBinary","base64ToString","binaryToString","binaryConcat","urlencode","rawencode","urlencodeBase64","hash","hmac","jwt","time","setTimeout_safe","sleep","TimedOut","timeout","throttle","json","unjson","aggregate","is_node","index_by","group_by","filter_by","sort_by","deep_extend","un_camel_case","is_number","is_array","is_object","is_string","is_string_coercible","is_dictionary","has_props","as_float","as_integer","safe_float","safe_integer","safe_value","safe_string","to_fixed","truncate_to_string","precision_from_string","string_to_binary","string_to_base64","utf16To_base64","base64To_binary","base64To_string","binary_to_string","binary_concat","urlencode_base64","set_timeout_safe","Timed_out","encode","decode","nodeVersion","userAgents","headers","proxy","origin","iso8601","parse8601","milliseconds","microseconds","seconds","id","enableRateLimit","rateLimit","parseJsonResponse","substituteCommonCurrencyCodes","parseBalanceFromOpenOrders","verbose","debug","journal","userAgent","twofa","timeframes","hasPublicAPI","hasPrivateAPI","hasCORS","hasDeposit","hasFetchBalance","hasFetchClosedOrders","hasFetchCurrencies","hasFetchMyTrades","hasFetchOHLCV","hasFetchOpenOrders","hasFetchOrder","hasFetchOrderBook","hasFetchOrders","hasFetchTicker","hasFetchTickers","hasFetchBidsAsks","hasFetchTrades","hasWithdraw","hasCreateOrder","hasCancelOrder","apiKey","secret","uid","login","password","requiredCredentials","exceptions","balance","orderbooks","tickers","fees","orders","trades","currencies","last_http_response","last_json_response","arrayConcat","market_id","market_ids","array_concat","implode_params","extract_params","fetch_balance","fetch_free_balance","fetch_used_balance","fetch_total_balance","fetch_l2_order_book","fetch_order_book","fetch_bids_asks","fetch_tickers","fetch_ticker","fetch_trades","fetch_order","fetch_orders","fetch_open_orders","fetch_closed_orders","fetch_order_status","fetch_markets","load_markets","set_markets","parse_balance","parse_bid_ask","parse_bids_asks","parse_order_book","parse_trades","parse_orders","parse_ohlcv","parse_ohlcvs","edit_limit_buy_order","edit_limit_sell_order","edit_limit_order","edit_order","create_limit_buy_order","create_limit_sell_order","create_market_buy_order","create_market_sell_order","create_order","calculate_fee","common_currency_code","price_to_precision","amount_to_precision","amount_to_string","fee_to_precision","cost_to_precision","constructor","getMarket","describe","defaults","nonce","encodeURIComponent","checkRequiredCredentials","initRestRateLimiter","defineRestApi","fetch","fetch2","request","handleErrors","defaultErrorHandler","handleRestErrors","handleRestResponse","setMarkets","loadMarkets","fetchBidsAsks","fetchTickers","fetchOrder","fetchOrders","fetchOpenOrders","fetchClosedOrders","fetchMyTrades","fetchCurrencies","fetchMarkets","fetchOrderStatus","account","commonCurrencyCode","currency","market","marketId","marketIds","symbol","extractParams","implodeParams","url","parseBidAsk","parseBidsAsks","fetchL2OrderBook","parseOrderBook","getCurrencyUsedOnOpenOrders","parseBalance","fetchPartialBalance","fetchFreeBalance","fetchUsedBalance","fetchTotalBalance","filterBySinceLimit","parseTrades","parseOrders","filterOrdersBySymbol","parseOHLCV","parseOHLCVs","editLimitBuyOrder","editLimitSellOrder","editLimitOrder","editOrder","createLimitBuyOrder","createLimitSellOrder","createMarketBuyOrder","createMarketSellOrder","costToPrecision","priceToPrecision","amountToPrecision","amountToString","amountToLots","feeToPrecision","calculateFee","Ymd","YmdHMS"]),t=a(Object.getOwnPropertyNames(r).concat(Object.getOwnPropertyNames(r.constructor.prototype)));for(const e of Array.from(s))if(this[e]&&!t.has(e))throw new Error(`missing prop: ${e}`);for(const e of Array.from(t))s.has(e)||log.magenta.noLocate(`+ ${e}`)}),it("camelCase/camel_case property conversion works #2",()=>{const r=new class extends e{};i(typeof r.load_markets,"function")}),it("legacy .hasSomething maps to has.something automatically",()=>{const r=new e({id:"mock",has:{CORS:!0,publicAPI:!1,fetchDepositAddress:"emulated"}});i(r.hasCORS,!0),i(r.hasPublicAPI,!1),i(r.hasFetchDepositAddress,!0)})});
//# sourceMappingURL=test.base.js.map