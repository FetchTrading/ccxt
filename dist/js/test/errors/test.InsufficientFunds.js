"use strict";const t=require("ololog"),e=(require("ansicolor").nice,require("chai")),i=require("../../../ccxt.js"),o=(e.expect,e.assert);module.exports=(async(e,r,n)=>{if(!e.has.createOrder)return void t("createOrder not supported");const s=(await e.loadMarkets())[r];if(void 0===s.limits)return void t("market.limits property is not set, will not test order creation");const{price:a,amount:c,cost:d}=s.limits;if(void 0===a||void 0===c||void 0===d)return void t("market.limits.[price|amount|cost] property is not set, will not test order creation");let l=a.min,u=c.min;const f=d.min;if(void 0===l||void 0===u||void 0===f)return void t("min limits are not set, will not test order creation");if(f>l*u&&(u=f/l),l=e.priceToPrecision(r,l),u=e.amountToPrecision(r,u),void 0===n)return void t("balance is not set, cannot ensure safety, will not test order creation");const{base:m,quote:p}=s;if(n[p].total>0)t("balance is not empty, will not test order creation");else try{t("creating limit buy order...",r,u,l);let n=await e.createLimitBuyOrder(r,u,l);t("order created although it should not had to - cleaning up"),t(n),await e.cancelOrder(n.id,r),o.fail()}catch(e){if(!(e instanceof i.InsufficientFunds))throw t("InsufficientFunds failed, exception follows:"),e;t("InsufficientFunds thrown as expected")}});
//# sourceMappingURL=test.InsufficientFunds.js.map