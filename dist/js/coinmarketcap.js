"use strict";const e=require("./base/Exchange"),{ExchangeError:i}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"coinmarketcap",name:"CoinMarketCap",rateLimit:1e4,version:"v1",countries:"US",has:{CORS:!0,privateAPI:!1,createOrder:!1,createMarketOrder:!1,createLimitOrder:!1,cancelOrder:!1,editOrder:!1,fetchBalance:!1,fetchOrderBook:!1,fetchOHLCV:!1,fetchTrades:!1,fetchTickers:!0,fetchCurrencies:!0},urls:{logo:"https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg",api:{public:"https://api.coinmarketcap.com",files:"https://files.coinmarketcap.com",charts:"https://graph.coinmarketcap.com"},www:"https://coinmarketcap.com",doc:"https://coinmarketcap.com/api"},requiredCredentials:{apiKey:!1,secret:!1},api:{files:{get:["generated/stats/global.json"]},graphs:{get:["currencies/{name}/"]},public:{get:["ticker/","ticker/{id}/","global/"]}},currencyCodes:["AUD","BRL","CAD","CHF","CNY","EUR","GBP","HKD","IDR","INR","JPY","KRW","MXN","RUB","USD","BTC","ETH","LTC"]})}async fetchOrderBook(e,t,o={}){throw new i("Fetching order books is not supported by the API of "+this.id)}currencyCode(e,i){const t={ACChain:"ACChain",AdCoin:"AdCoin",BatCoin:"BatCoin",Bitgem:"Bitgem",BlazeCoin:"BlazeCoin",BlockCAT:"BlockCAT",Catcoin:"Catcoin",CanYaCoin:"CanYaCoin",Comet:"Comet",CPChain:"CPChain",Cubits:"Cubits","DAO.Casino":"DAO.Casino",ENTCash:"ENTCash",FairGame:"FairGame","GET Protocol":"GET Protocol","Global Tour Coin":"Global Tour Coin",GuccioneCoin:"GuccioneCoin",HarmonyCoin:"HarmonyCoin",Huncoin:"Huncoin",iCoin:"iCoin","Infinity Economics":"Infinity Economics","KingN Coin":"KingN Coin",LiteBitcoin:"LiteBitcoin",Maggie:"Maggie",MIOTA:"IOTA",NetCoin:"NetCoin",Polcoin:"Polcoin",PutinCoin:"PutinCoin",Rcoin:"Rcoin"};return i in t?t[i]:e}async fetchMarkets(){let e=await this.publicGetTicker({limit:0}),i=[];for(let t=0;t<e.length;t++){let o=e[t],a=this.currencyCodes;for(let e=0;e<a.length;e++){let t=a[e],r=t.toLowerCase(),n=o.id,s=this.currencyCode(o.symbol,o.name),c=s+"/"+t,l=n+"/"+r;i.push({id:l,symbol:c,base:s,quote:t,baseId:n,quoteId:r,info:o})}}return i}async fetchGlobal(e="USD"){await this.loadMarkets();let i={};return e&&(i.convert=e),await this.publicGetGlobal(i)}parseTicker(e,i){let t=this.milliseconds();"last_updated"in e&&e.last_updated&&(t=1e3*parseInt(e.last_updated));let o=void 0;"percent_change_24h"in e&&e.percent_change_24h&&(o=this.safeFloat(e,"percent_change_24h"));let a=void 0,r=void 0,n=void 0;if(i){let t="price_"+i.quoteId;t in e&&e[t]&&(a=this.safeFloat(e,t)),r=i.symbol;let o="24h_volume_"+i.quoteId;o in e&&e[o]&&(n=this.safeFloat(e,o))}return{symbol:r,timestamp:t,datetime:this.iso8601(t),high:void 0,low:void 0,bid:void 0,bidVolume:void 0,ask:void 0,askVolume:void 0,vwap:void 0,open:void 0,close:a,last:a,previousClose:void 0,change:o,percentage:void 0,average:void 0,baseVolume:void 0,quoteVolume:n,info:e}}async fetchTickers(e="USD",i={}){await this.loadMarkets();let t={limit:1e4};e&&(t.convert=e);let o=await this.publicGetTicker(this.extend(t,i)),a={};for(let i=0;i<o.length;i++){let t=o[i],r=e.toLowerCase(),n=t.id+"/"+r,s=n,c=void 0;n in this.markets_by_id&&(s=(c=this.markets_by_id[n]).symbol),a[s]=this.parseTicker(t,c)}return a}async fetchTicker(e,i={}){await this.loadMarkets();let t=this.market(e),o=this.extend({convert:t.quote,id:t.baseId},i),a=(await this.publicGetTickerId(o))[0];return this.parseTicker(a,t)}async fetchCurrencies(e={}){let i=await this.publicGetTicker(this.extend({limit:0},e)),t={};for(let e=0;e<i.length;e++){let o=i[e],a=o.symbol,r=o.name,n=8,s=this.currencyCode(a,r);t[s]={id:a,code:s,info:o,name:r,active:!0,status:"ok",fee:void 0,precision:n,limits:{amount:{min:Math.pow(10,-n),max:Math.pow(10,n)},price:{min:Math.pow(10,-n),max:Math.pow(10,n)},cost:{min:void 0,max:void 0},withdraw:{min:void 0,max:void 0}}}}return t}sign(e,i="public",t="GET",o={},a,r){let n=this.urls.api[i]+"/"+this.version+"/"+this.implodeParams(e,o),s=this.omit(o,this.extractParams(e));return Object.keys(s).length&&(n+="?"+this.urlencode(s)),{url:n,method:t,body:r,headers:a}}async request(e,t="public",o="GET",a={},r,n){let s=await this.fetch2(e,t,o,a,r,n);if("error"in s&&s.error)throw new i(this.id+" "+this.json(s));return s}};
//# sourceMappingURL=coinmarketcap.js.map