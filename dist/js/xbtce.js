"use strict";const e=require("./base/Exchange"),{ExchangeError:t,NotSupported:i,AuthenticationError:s}=require("./base/errors");module.exports=class extends e{describe(){return this.deepExtend(super.describe(),{id:"xbtce",name:"xBTCe",countries:"RU",rateLimit:2e3,version:"v1",has:{publicAPI:!1,CORS:!1,fetchTickers:!0,createMarketOrder:!1},urls:{logo:"https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg",api:"https://cryptottlivewebapi.xbtce.net:8443/api",www:"https://www.xbtce.com",doc:["https://www.xbtce.com/tradeapi","https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api"]},requiredCredentials:{apiKey:!0,secret:!0,uid:!0},api:{public:{get:["currency","currency/{filter}","level2","level2/{filter}","quotehistory/{symbol}/{periodicity}/bars/ask","quotehistory/{symbol}/{periodicity}/bars/bid","quotehistory/{symbol}/level2","quotehistory/{symbol}/ticks","symbol","symbol/{filter}","tick","tick/{filter}","ticker","ticker/{filter}","tradesession"]},private:{get:["tradeserverinfo","tradesession","currency","currency/{filter}","level2","level2/{filter}","symbol","symbol/{filter}","tick","tick/{filter}","account","asset","asset/{id}","position","position/{id}","trade","trade/{id}","quotehistory/{symbol}/{periodicity}/bars/ask","quotehistory/{symbol}/{periodicity}/bars/ask/info","quotehistory/{symbol}/{periodicity}/bars/bid","quotehistory/{symbol}/{periodicity}/bars/bid/info","quotehistory/{symbol}/level2","quotehistory/{symbol}/level2/info","quotehistory/{symbol}/periodicities","quotehistory/{symbol}/ticks","quotehistory/{symbol}/ticks/info","quotehistory/cache/{symbol}/{periodicity}/bars/ask","quotehistory/cache/{symbol}/{periodicity}/bars/bid","quotehistory/cache/{symbol}/level2","quotehistory/cache/{symbol}/ticks","quotehistory/symbols","quotehistory/version"],post:["trade","tradehistory"],put:["trade"],delete:["trade"]}}})}async fetchMarkets(){let e=await this.privateGetSymbol(),t=[];for(let i=0;i<e.length;i++){let s=e[i],r=s.Symbol,o=s.MarginCurrency,a=s.ProfitCurrency;"DSH"===o&&(o="DASH");let l=o+"/"+a;l=s.IsTradeAllowed?l:r,t.push({id:r,symbol:l,base:o,quote:a,info:s})}return t}async fetchBalance(e={}){await this.loadMarkets();let t=await this.privateGetAsset(),i={info:t};for(let e=0;e<t.length;e++){let s=t[e],r=s.Currency.toUpperCase();"DSH"===r&&(r="DASH");let o={free:s.FreeAmount,used:s.LockedAmount,total:s.Amount};i[r]=o}return this.parseBalance(i)}async fetchOrderBook(e,t,i={}){await this.loadMarkets();let s=this.market(e),r=await this.privateGetLevel2Filter(this.extend({filter:s.id},i)),o=(r=r[0]).Timestamp;return this.parseOrderBook(r,o,"Bids","Asks","Price","Volume")}parseTicker(e,t){let i=0,s=void 0;"LastBuyTimestamp"in e&&i<e.LastBuyTimestamp&&(i=e.LastBuyTimestamp,s=e.LastBuyPrice),"LastSellTimestamp"in e&&i<e.LastSellTimestamp&&(i=e.LastSellTimestamp,s=e.LastSellPrice),i||(i=this.milliseconds());let r=void 0;return t&&(r=t.symbol),{symbol:r,timestamp:i,datetime:this.iso8601(i),high:e.DailyBestBuyPrice,low:e.DailyBestSellPrice,bid:e.BestBid,bidVolume:void 0,ask:e.BestAsk,askVolume:void 0,vwap:void 0,open:void 0,close:s,last:s,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:e.DailyTradedTotalVolume,quoteVolume:void 0,info:e}}async fetchTickers(e,t={}){await this.loadMarkets();let i=await this.publicGetTicker(t);i=this.indexBy(i,"Symbol");let s=Object.keys(i),r={};for(let e=0;e<s.length;e++){let t=s[e],o=void 0,a=void 0;if(t in this.markets_by_id)a=(o=this.markets_by_id[t]).symbol;else{let e=t.slice(0,3),i=t.slice(3,6);"DSH"===e&&(e="DASH"),"DSH"===i&&(i="DASH"),a=e+"/"+i}let l=i[t];r[a]=this.parseTicker(l,o)}return r}async fetchTicker(e,i={}){await this.loadMarkets();let s=this.market(e),r=await this.publicGetTickerFilter(this.extend({filter:s.id},i));if(r.length<1)throw new t(this.id+" fetchTicker returned empty response, xBTCe public API error");let o=(r=this.indexBy(r,"Symbol"))[s.id];return this.parseTicker(o,s)}async fetchTrades(e,t,i,s={}){return await this.loadMarkets(),await this.privateGetTrade(s)}parseOHLCV(e,t,i="1m",s,r){return[e.Timestamp,e.Open,e.High,e.Low,e.Close,e.Volume]}async fetchOHLCV(e,t="1m",s,r,o={}){throw new i(this.id+" fetchOHLCV is disabled by the exchange")}async createOrder(e,i,s,r,o,a={}){if(await this.loadMarkets(),"market"===i)throw new t(this.id+" allows limit orders only");let l=await this.privatePostTrade(this.extend({pair:this.marketId(e),type:s,amount:r,rate:o},a));return{info:l,id:l.Id.toString()}}async cancelOrder(e,t,i={}){return await this.privateDeleteTrade(this.extend({Type:"Cancel",Id:e},i))}nonce(){return this.milliseconds()}sign(e,t="public",i="GET",r={},o,a){if(!this.apiKey)throw new s(this.id+" requires apiKey for all requests, their public API is always busy");if(!this.uid)throw new s(this.id+" requires uid property for authentication and trading, their public API is always busy");let l=this.urls.api+"/"+this.version;"public"===t&&(l+="/"+t),l+="/"+this.implodeParams(e,r);let c=this.omit(r,this.extractParams(e));if("public"===t)Object.keys(c).length&&(l+="?"+this.urlencode(c));else{this.checkRequiredCredentials(),o={"Accept-Encoding":"gzip, deflate"};let e=this.nonce().toString();"POST"===i&&(Object.keys(c).length?(o["Content-Type"]="application/json",a=this.json(c)):l+="?"+this.urlencode(c));let t=e+this.uid+this.apiKey+i+l;a&&(t+=a);let s=this.hmac(this.encode(t),this.encode(this.secret),"sha256","base64"),r=this.uid+":"+this.apiKey+":"+e+":"+this.binaryToString(s);o.Authorization="HMAC "+r}return{url:l,method:i,body:a,headers:o}}};
//# sourceMappingURL=xbtce.js.map